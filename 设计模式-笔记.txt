面向对象设计的基本原则
    OCP（开闭原则，Open-Close Principle）:一个软件的实体应当对扩展开放，对修改关闭
    DIP（依赖倒转原则，Dependence Inversion Principle）:要针对接口编程，不要针对实现编程
    LoD（迪米特法则，Law of Demeter）：只与你直接的朋友通信，而避免和陌生人通信

创造型模式
    单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式

结构型模式
    适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式
    核心作用：是从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题

行为型模式
    模板方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式


1、单例模式
    核心作用
        保证一个类只有一个实例，并且提供一个访问该实例的全局访问点

    常见应用场景
        windows的Task Manager (任务管理器)
        windows的Recycle Bin (回收站)
        项目中的配置文件的类
        网站计数器
        应用程序的日志应用
        数据库连接池的设计一般也采用到单例模式，因为数据库连接是一种数据库资源
        操作系统的文件系统，也是大的单例模式实现的具体例子，一个操作系统只有一个文件系统
        Application也是单例的典型应用（Servlet编程中会涉及到）
        在Spring中，每个Bean默认就是单例的，这样做的优点是Spring容器可以管理
        在Servlet中，每个Servlet也是单例
        在spring MVC框架/struts1框架中，控制器对象也是单例


    单例模式的优点
        由于单例模式只生成一个实例，减少系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决

        单例模式可以在系统设置全局的访问点，优化环境共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理

    常见的五种单例模式实现方式
        主要
            饿汉式（线程安全，调用效率高。但是，不能延时加载）
            懒汉式（线程安全，调用效率不高。但是，可以延时加载）
        其它
            双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）
            静态内部类式（线程安全，调用效率高。但是，可以延时加载）
            枚举单例（线程安全，调用效率高，不能延时加载）



2、工厂模式
    实现创建者和调用者的分离
    详细分类
        简单工厂模式（静态工厂模式）
            虽然某种程度不符合设计原则，但实际使用最多
        工厂方法模式
            不修改已有类得前提下，通过增加新得工厂类实现扩展
        抽象工厂模式
            不可增加产品，可以增加产品族（产品族，汽车有高端有低端，高端可能使用高端得产品[高端发动机，高端座椅，高端轮胎]，低端可能使用低端得产品[低端发动机，低端座椅，低端轮胎]）


    核心本质
        实例化对象，用工厂方法替代new操作
        将选择实现类、创建对象同一管理和控制，从而将调用者跟我们的实现类解耦

    工厂模式
        简单工厂模式
            用来生产同一等级结构中的任意产品（对于新增的产品，需要修改已有代码）
        工厂方法模式
            用来生产同一等级结构中的固定产品（支持增加任意产品）
        抽象工厂模式
            用来生产不同产品族的全部产品（对于增加新的产品，无能为力，支持增加产品族）

    应用场景
        JDK中Calendar得getInstance方法
        JDBC中Connection对象的获取
        Hibernate中SessionFactory创建Session
        spring中IOC容器创建bean对象
        XML解析时的DocumentBuilderFactory创建解析器对象
        反射中Class对象的newInstance()





3、建造者模式
    场景
        我们需要建造一个复杂的产品。如手机，智能电视。这种复杂的产品的创建，有这样一个问题需要我们处理
            装配这些子组件是不是有个步骤问题？
        实际开发中，我们所需要的对象构造时，也非常复杂，有很多步骤需要处理时。
    本质
        分离了对象子组件的单独构造（由Builder来负责）和装配（由Director负责）。从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况下使用。
        由于实现了构造和装配的解耦。不同的构造器，相同的装配。也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。

    开发中的场景
        StringBuilder类的append方法
        SQL中的PreparedStatement
        JDOM中，DomBuilder、SAXBuilder




4、原型模式
    场景
        思考一下：克隆技术是怎么样的过程？克隆羊多利大家还记得吗？
        JavaScript中的，继承怎么实现？那里面也由prototype，大家还记得吗？

    原型模式
        通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式
        就是java中的克隆技术，以某个对象为原型，复制出新的对象。显然，新的对象具备原型对象的特点
        优势：效率高（直接克隆，避免重复执行构造过程步骤）
        克隆类似new，但不同于new。new创建新的对象属性采用的是默认值。克隆出的对象的属性值完全和对象相同。并且克隆出的新对象改变不会影响原型对象。然后再修改克隆对象的值。

    原型模式实现：
        Cloneable接口和clone方法
        Prototype模式中实现起来最困难的狄梵就是内存复制操作，所幸在java中提供了clone方法替代我们做了绝大部分事情

    注意用词：克隆和拷贝一回事



5、适配器模式
    什么是适配器模式?
        将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作

    模式中的角色
        目标接口（Target）：客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口
        需要适配的类（Adaptee）：需要适配的类或适配者类
        适配器（Adapter）：通过包装一个需要适配的对象，把原接口转换成目标接口


    工作中的场景
        经常用来做旧系统改造和升级

    场景
        java.io.InputStreamReader(InputSteam)
        java.io.outputStreamWriter(OutputSteam)



6、代理模式
    核心作用
        通过代理，控制对对象的访问
        可以详细控制访问某个（某类）对象的方法，在调用这个方法前做前置处理，调用这个方法之后做后置处理（即：AOP的微观实现）

    AOP（Aspect Oriented Programming 面向切面编程）的核心实现机制

    核心角色
        抽象角色
            定义代理角色和真实角色的公共对外方法
        真实角色
            实现抽象角色，定义真实角色所需要的业务逻辑，供代理角色调用
            关注真正的业务逻辑
        代理角色
            实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作
            将同一的流程控制方法代理角色中处理！

    应用场景
        安全代理：屏蔽对真实橘色的直接访问
        远程代理：通过代理类处理远程方法调用（RMI）
        延迟代理：先加载轻量级的代理对象，真正需要再加载真实对象
            比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片100M，再打开文件时不可能将所有图片都显示出来，这样就可以使用代理模式，当需要查看图片时，用proxy来进行大图片的打开

    分类
        静态代理（静态定义代理类）
        动态代理（动态生成代理类）
            JDK自带的动态代理
            javaassist字节码操作库实现
            CGLIB
            ASM（底层使用指令，可维护性较差）

    动态代理（JDK）
        java.lang.reflect.Proxy
            作用：动态生成代理类和对象
        java.lang.reflect.InvocationHandler（处理接口）
            可以通过invoke方法实现对真实橘色的代理访问
            可以通过Proxy生成代理类对象，该对象都要指定对应的处理对象


7、桥接模式（bridge）
    场景
        商场系统中常见的商品分类，以电脑为类，如何良好的处理商品分类销售的问题？


    我们可以用“多层次集成结构”实现下图的关系

                                                电脑
                                                 |
                    |----------------------------|----------------------------------|
                    |                            |                                  |
                台式机                         笔记本                             平板电脑
            |------|-------|           |---------|---------|            |------------|------------|
            |      |       |           |         |         |            |            |            |
        联想台式 神州台式 戴尔台式    联想笔记本 神州笔记本 戴尔笔记本     联想pad     神州pad      戴尔pad  


    问题
        扩展性问题（类个数膨胀问题）
            如果要增加一个新的电脑类型智能手机，则要增加各个品牌下面的类
            如果要增加一个新的品牌，也要增加各类电脑类型的类

        违反单一职责原则
            一个类：联想笔记本，有两个引起这个类变化的原因

    场景分析
        商场系统中常见的商品分类，以电脑为类，如何良好的处理商品分类销售的问题？
        这个场景中有连个变化的维度：电脑类型、电脑品牌

    桥接模式核心要点
        处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的集成结构，使各个维度可以独立的扩展在抽象层建立关联

    桥接模式总结
        桥接模式可以用来取代多层继承的方案。多层继承违背了单一职责原则，复用性较差，类的个数也非常多。桥接模式可以极的减少子类的个数，从而降低管理和维护的成本
        桥接模式极大的提高了系统可扩展性，在两个变化维度中任意扩展一个维度，多不需要修改原有的系统，符合开闭原则

    实际开发中应用场景
        JDBC驱动程序
        AWT中的Peer架构
        银行日志管理
            格式分类：操作日志、交易日志、异常日志
            距离分类：本地记录日志、异地记录日志
        人力资源系统中的奖金计算模块
            奖金分类：个人奖金、团体奖金、激励奖金
            部门分类：人事部门、销售部门、研发部门
        OA系统中的消息处理
            业务类型：普通消息、加急消息、特急消息
            发消息的方式：系统内消息、手机短信、邮件



8、组合模式（composite）
    使用组合模式的场景
        把部分和整体的关系用树形结构来表示，从而使客户端可以使用统一的方式处理部分对象和整体对象

    组合模式核心
        抽象构件（Component）角色：定义了叶子和容器构件的共同点
        叶子（Leaf）构件角色：无子节点
        容器（Composite）构件角色：有容器特征，可以包含子节点

    组合模式工作流程分析
        组合模式为处理树形结构提供了完美的解决方案，描述了如何将容器和叶子进行递归组合，使得用户在使用时可以一致性的对待容器和叶子
        当容器对象的指定方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员，并调用执行。其中，使用了递归调用的机制对整个结构进行处理

    开发中的应用场景
        操作系统的资源管理器
        GUI中的容器层次图
        XML文件解析
        OA系统，组织结构的处理
        Junit单元测试框架
            底层设计就是典型的组合模式，TestCase（叶子）、TestUnite（容器）、Test接口（抽象）



9、装饰器模式（decorator）
    职责
        动态的为一个对象增加新的功能
        装饰模式时一种对于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系替代继承关系，更加灵活，同时避免类型体系的快速膨胀

    实现细节
        Component抽象构件角色
            真实对象和装饰对象有相同的接口。这样，客户端对象就能够以与真实对象相同的方式同装饰对象交互
        ConcreteComponent具体构件角色（真实对象）
            io六种的FileInputStream、FileOutputStream
        Decorator装饰角色
            持有一个抽象构件的引用。装饰对象接受客户端的请求，并把这些请求转发给真实对象。这样就能在真实对象调用前后增加新的功能
        ConcrateDecorator具体装饰角色
            负责给构件对象增加新的责任

    开发中使用场景
        IO中输入流和输出流的设计
        Swing包中图形界面的构件功能
        Servlet API中提工了一个request对象的Decorator设计模式的默认实现类HttpSevletRequestWrapper，HttpServletRequestWrapper类，增强request对象的功能
        Struts2中，request，response，session对象的处理


    总结
        装饰模式（Decorator）也叫包装器模式（Wrapper）
        装饰模式降低系统的耦合度，可以动态的增加或删除对象的职责，并使得需要装饰的具体构件类和具体装饰类可以独立变化，以便增加新的具体构件类和具体装饰类

    优点
        扩展对象新功能，比继承灵活，不会导致类的个数急剧增加
        可以对一个对象进行多次装饰，创造出不同行为的组合，使得功能更加强大的对象
        具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰子类

    缺点
        产生很多小对象。大量小对象占据内存，一定程度上影响性能
        装饰模式易于出错，调试排查比较麻烦

    装饰模式和桥接模式的区别
        两个模式都是为了解决过多子类对象问题。但他们的诱因不一样。桥接模式时对象自身现有机制沿着多个维度变化，时既有部分不稳定。装饰模式是为了增加新功能。



10、外观模式（Facade 门面模式）
    迪米特法则（最少知识原则）
        一个软件实体应当尽可能少的与其它实体发生相互作用

    外观模式核心
        为子系统提供统一的入口。封装子系统的复杂性，便于客户端调用

    开发中的场景
        频率很高。哪里都会遇到。各种技术和框架中，都有外观模式的使用。如
            JDBC封装后的，commons提供的DBUtils类，Hibernate提工的工具类、Spring JDBC工具类等



11、享元模式（FlyWeight）
    场景
        内存属于稀缺资源，不要随便浪费。如果有很多个完全相同或相似的对象，我们可以通过享元模式，节省内存

    核心
        享元模式以共享的方式高效地支持大量细粒度对象的重用
        享元对象能做到共享的关键是区分了内部状态和外部状态
            内部状态：可以共享，不会随环境变化而改变
            外部状态：不可以共享，会随环境变化而改变

    享元模式的实现
        FlyweightFactory享元工厂类
            创建并管理享元对象，享元池一般设计成键值对
        FlayWeight抽象享元类
            通常是一个接口或抽象类，声明公共方法，这些方法可以向外界提供对象的内部状态，设置外部状态
        ConcreteFlyWeight具体享元类
            为内部状态提供成员变量进行存储
        UnsharedConcreteFlyWeight非共享享元类
            不能被共享的子类可以设计为非共享享元类

    开发场景
        享元模式由于其共享的特性，可以在任何“池”中操作，比如：线程池、数据连接池
        String类的设计也是享元模式

    优点
        极大减少内存中对象的数量
        相同或相似对象内存中只存一份，极大的节约资源，提高系统性能
        外部状态相对独立，不影响内部状态

    缺点
        模式较复杂，使程序逻辑复杂化
        为了节省内存，共享了内部状态，分离出外部状态，而读取外部状态使运行时间变长。用时间换取了空间




12、责任链模式（chain of responsibility）
    定义
        将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象

    场景
        打牌时，轮流出牌
        接力赛跑
        大学中，奖学金审批
        公司中，公文审批

    非链表方式实现职责链
        通过集合、数组生成职责链更加实用！实际上，很多项目中，每个具体的Handler并不是由开发团队定义的，而是项目上线后由外部单位追加的，所以使用链表方式定义COR链就很困难

    开发中的场景
        Java中异常机制就是一种责任链模式。一个try可以对应多个catch，当第一个catch不匹配类型，则自动跳到第二个catch
        JavaScript语言中，时间的冒泡和捕获机制。java语言中，事件的处理采用观察者模式
        Servlet开发中，过滤器的链式处理
        Struts2中，拦截器的调用也是典型的责任链模式



13、迭代器模式（iterator）
    场景
        提供一种可以遍历聚合对象的方式。又称为：游标cursor模式
        聚合对象：存储数据
        迭代器：遍历数据

    基本案例
        实现正向遍历的迭代器
        实现逆向遍历的迭代器

    开发中常见的场景
        JDK内置的迭代器（List/Set）



14、中介者模式（Mediator）
    核心
        如果一个系统中对象之间的联系呈为网状结构，对象之间存在大量多对多关系，将导致关系及其复杂，这些对象成为“同事对象”
        我们可以引入一个中介者对象，使各个同事对象只跟中介者对象打交道，将复杂的网络结构化解为星状结构

    中介者模式的本质
        解耦多个同事对象之间的交互关系。每个对象都持有中介者对象的引用，只跟中介者对象打交道。我么通过中介者对象统一管理这些交互关系

    开发中常见的场景
        MVC模式（其中的C，控制器就是一个中介者对象。M和V都和他打交道）
        窗口游戏程序，窗口软件开发中窗口对象也是一个中介者对象
        图形界面开发GUI中，多个组件之间的交互，可以通过引入一个中介者对象来解决，可以是整体的窗口对象或者DOM对象
        Java.lang.reflect.Method#invoke()


15、命令模式（command）
    实际项目中使用的概率低
    介绍
        命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。也称之为：动作Action模式、事务transaction模式

    结构
        Command抽象命令类
        ConcreteCommand具体命令类
        Invoker调用者/请求者
            请求的发送者，它通过过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，因此它只与抽象命令类之间存在关联。在程序运行时，将调用命令对象的execute()，间接调用接收者的相关操作
        Receiver接收者
            接收者执行与请求相关的操作，具体实现对请求的业务处理
            未抽象前，实际执行操作内容的对象
        Client
            在客户类中需要创建调用者对象、具体命令类对象，在创建具体命令对象时指定对应的接收者。发送者和接收者之间没有直接关系，都通过命令对象间接调用

    开发中常见的场景
        Struts2中，action的整个调用过程中就有命令模式
        数据库事务机制的底层实现
        命令的撤销和恢复


16、解释器模式（Interpreter）
    介绍
        是一种不常用的设计模式
        用于描述如何构成一个简单的语言解释器，主要用于使用面向对象语言开发的编译器和解释器设计
        当我们需要开发一种新语言时，可以考虑使用解释器模式
        尽量不要使用解释器模式，后期维护会有很大麻烦。在项目中，可以使用Jruby，Groovy、java的js引擎来替代解释器的作用，弥补java语言的不足

    开发中常见的场景
        EL表达式的处理
        正则表达式解释器
        SQL语法的解释器
        数学表达式解释器
            如现成的工具包Math Expression String Parser、Expresion4J等

    角色：
    　　环境角色：定义解释规则的全局信息。
    　　抽象解释器：定义了部分解释具体实现，封装了一些由具体解释器实现的接口。
    　　具体解释器：实现抽象解释器的接口，进行具体的解释执行。


17、访问者模式（Visitor）
    模式动机
        对于存储在一个集合中的对象，他们可能具有不同的类型（即使有一个公共的接口），对于该集合中的对象，可以接收一类称为访问者的对象来访问，不同的访问者其访问方式也有所不同

    定义
        表示一个作用于某对象结构中的各元素的操作，它使我们可以在不改变元素的类的前提下定义作用于这些元素的新操作

    开发中的场景（应用访问非常窄，了解即可）
        XML文档解释器设计
        编译器的设计
        复杂集合对象的处理

    角色
        抽象访问者角色(Visitor)：为该对象结构(ObjectStructure)中的每一个具体元素提供一个访问操作接口。该操作接口的名字和参数标识了 要访问的具体元素角色。这样访问者就可以通过该元素角色的特定接口直接访问它。
        具体访问者角色(ConcreteVisitor)：实现抽象访问者角色接口中针对各个具体元素角色声明的操作。
        抽象节点（Node）角色：该接口定义一个accept操作接受具体的访问者。
        具体节点（Node）角色：实现抽象节点角色中的accept操作。
        对象结构角色(ObjectStructure)：这是使用访问者模式必备的角色。它要具备以下特征：能枚举它的元素；可以提供一个高层的接口以允许该访问者访问它的元素；可以是一个复合（组合模式）或是一个集合，如一个列表或一个无序集合(在PHP中我们使用数组代替，因为PHP中的数组本来就是一个可以放置任何类型数据的集合)


18、策略模式（strategy）
    场景
        某个市场人员接到单后的报价策略（CRM系统中常见问题）。报价策略很复杂，可以简单作如下分类
            普通客户小批量报价
            普通客户大批量报价
            老客户小批量报价
            老客户大批量报价

        具体选用哪个报价策略，者需要根据实际情况来确定。这时候，我们采用策略模式即可

    策略模式
        策略模式对应于解决某一个问题的算法族，允许用户从该算法族中任选一个算法解决问题，同事可以方便的更换算法或增加新的算法。并且由客户端决定调用哪种算法

    本质
        分离算法，选择实现

    开发中常见的场景
        javase中GUI编程中，布局管理
        Spring框架中，Resource接口，资源访问策略
        java.servlet.HttpServlet#service()



19、模板方法模式（template method）
    场景
        客户到银行办理业务
            取号排队
            办理具体现金|转账|企业|个人|理财业务
            给银行工作人员评分

    模板方法模式介绍
        模板方法模式是编程中经常用得到得模式。它定义了一个操作中的算法骨架，将某些步骤延迟到子类中实现。这样新的子类可以在不改变一个算法结构的前提下重新定义该算法的某些特定步骤

    核心
        处理某个流程的代码已经都具备，但是其中某个节点的代码暂时不能确定。因此，我们采用工厂方法模式，将这个节点的代码实现转移给子类完成。即：处理步骤父类中定义好，具体是新啊延迟到子类中定义


    方法回调（钩子方法）
        在软件开发中，我们可以将call翻译为调用。子类不能调用父类，而通过父类调用子类。这些调用步骤已经在父类中写好了，完全由父类控制整个过程

    什么时候用到模板方法模式
        实现一个算法时，整体步骤很固定。但是，某些部分易变。易变部分可以抽象出来，供子类实现

    开发总常见的场景
        非常频繁。各个框架、类库都有它的影子。比如常见的由
            数据库访问的封装
            Junit单元测试
            servlet中关于doGet/doPost方法的调用
            Hibernate模板程序
            spring中国JDBCTemplate、HibernateTemplate等


20、状态模式
    场景
        电梯的运行
            维修、正常、自动关门、自动开门、向上运行、向下运行、消防状态
        红绿灯
            红灯、黄灯、绿灯
        企业或政府系统
            公文的审批状态
                报销单据审批状态
                假条审批
        网上购物时，订单的状态
            下单
            已付款
            已发货
            送货中
            已收货

        酒店系统中，房间的状态变化
            已预定
            已入住
            空闲

    核心
        用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题

    结构
        Context环境类
            环境类中维护一个state对象，他是定义了当前的状态
        State抽象状态类
        ConcreteState具体状态类
            每一个类封装了一个状态对应的行为

    开发中常见的场景
        银行系统中账户装填的管理
        OA系统中公文状态的管理
        酒店系统中，房间状态的管理
        线程对象各状态之间的切换


21、观察者模式（Observer）
    广播机制的场景

    场景
        聊天室程序的创建。服务器创建好后，A，B，C三个客户端练上来公开聊天。A向服务器发送数据，服务器端聊天数据改变。我们希望这些聊天数据分别发给其它在线客户。也就是说，每个客户端需要更新服务器的数据
        
        网站上，很多人订阅了“java主题”的新闻。当有这个主题新闻时，就会将这些新闻发给所有订阅的人
        
        大家一起玩cs游戏时，服务器需要将每个人的方位变化发给所有客户

        上面这些场景，我们都可以使用观察者模式来处理。我们可以把多个订阅者、客户称之为观察者；需要同步给多个订阅者的数据封装到对象中，称之为目标

    核心
        观察者模式主要用于1：N的通知。当一个对象（目标对象Subject或Observable  消息发布）的状态变化时，他需要及时告知一系列的对象（观察者，Observer  消息订阅）,令他们做出响应

        通知观察者的方式
            推
                每次都会把通知以广播的方式发送给所有观察者，所有观察者只能被动接收
            拉
                观察者只有直到有情况即可。至于什么时候获取内容，获取什么内容，都可以自主决定

    开发中常见的场景
        聊天室程序的，服务器转发给所有客户端
        网络游戏中（多人联机对战）场景中，服务器将客户端的状态进行分发
        邮件订阅
        Servlet中，监听器的实现
        Android中广播机制
        JDK中AWT中事件处理模型，基于观察者模式的委派事件模型（Delegation Event Model）
            事件源 --- 目标对象
            事件监听器 --- 观察者

        京东商城中，群发某个商品的打折信息


22、备忘录模式（memento）
    场景
        录入大批人员资料。正在录入当前人资料时，发现上一个人录错了，此时需要恢复上一个人资料，再进行修改
        word文档编辑时，突然电脑死机或断电，再打开时，可以看到word提示你恢复到以前的文档
        管理系统中，公文撤回功能。公文发送出去后，想撤回来

    核心
        就是保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的装填

    结构
        源发器类Originator
        备忘录类Memento
        负责人类CareTaker

    负责人类
        负责保存好的备忘录对象
        可以通过增加容器（List），设置多个“备忘点”

    备忘点较多时
        将备忘录压栈
        将多个备忘录对象，序列化和持久化

    开发中的场景
        棋类游戏中的，悔棋
        普通软件中的撤销操作
        数据库软件中的，事务管理中的，回滚操作
        Photoshop软件中的，历史记录




















































